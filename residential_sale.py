# -*- coding: utf-8 -*-
"""Residential_sale

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15rOi3k1AdEZw4wNl1qpUdrz7-SfE8DVk
"""

pip install nums_from_string

import requests
import datetime
import nums_from_string
import csv
import json
import pandas as pd
import numpy as np
from bs4 import BeautifulSoup

data = []
cities=['Mumbai', 'Gurgaon']

today = datetime.datetime.today().strftime ('%Y-%m-%d')
def get_date_posted(ago_count):
  Previous_Date = datetime.datetime.today() - datetime.timedelta(days=ago_count)
  previous_d_for = Previous_Date.strftime ('%d/%m/%Y')
  return previous_d_for

def scrape(city):
  for i in range(1,5):

    url = "https://www.magicbricks.com/property-for-sale/residential-real-estate?bedroom=2,3&proptype=Multistorey-Apartment,Builder-Floor-Apartment,Penthouse,Studio-Apartment,Residential-House,Villa&page="+str(i)+"&cityName="+city+"&language=en"
    response = requests.get(url)
    response = response.content
    soup = BeautifulSoup(response, 'html.parser')
    cards = soup.find_all('div', class_='mb-srp__card')

    locality = None
    furnishing = None
    carpet_area = None
    facing = None
    floor = None
    tenant = None
    bathrooms = None
    status = None
    transaction = None
    society = None
    desc = None
    date_posted = None

    for card in cards:
      try:
        posted_date = card.find(class_="mb-srp__card__photo__fig--post").text
        if 'today' in posted_date or 'Today' in posted_date:
          date_posted = get_date_posted(0)
        elif 'ago' in posted_date:
          ago_date_count = int(nums_from_string.get_nums(posted_date)[0])
          if 'days' in posted_date:
              date_posted = get_date_posted(ago_date_count)
          elif 'weeks' in posted_date:
              date_posted = get_date_posted((ago_date_count*7))
          else:
              date_posted = get_date_posted((ago_date_count*30))
        elif 'yesterday' in posted_date or 'Yesterday' in posted_date:
            date_posted = get_date_posted(1)
        else:
            date_posted = posted_date.replace('Posted: ','')
            
      except:
          posted_date = None
      try: 
          link = card.find('a', class_='mb-srp__card__society--name')['href']
      except:
          link = None
      try: 
          owner = card.find('div', class_='mb-srp__card__ads--name').text
      except:
          owner = None
      bhks = card.find('h2', class_='mb-srp__card--title').text
      prop_locality = bhks.split(', ')
      bhk = prop_locality[0][0:5]
      del prop_locality[0]
      try:
        locality = prop_locality[0]
      except:
        locality = city
      childs = card.find('div', class_='mb-srp__card__summary__list')
      description = card.find('div', class_='mb-srp__card--desc')
      try: 
          desc = description.find('p').text.replace('"', '')
      except:
          desc = None
      price = card.find('div', class_='mb-srp__card__price--amount').text.replace('₹', '')
      try: 
          per_sqft = card.find('div', class_='mb-srp__card__price--size').text.replace('₹', '')
      except:
          per_sqft = None
      for elem in childs.contents:
        try:
          if elem.get('data-summary') == 'facing':
            facing = elem.text.replace('facing', '')
        except:
          facing= None
        try:
          if elem.get('data-summary') == 'tenent-preffered':
            tenant = elem.text.replace('Tenant Preferred', '')
        except:
          tenant= None
        try:
          if elem.get('data-summary') == 'floor':
            floor = elem.text.replace('Floor', '')
        except:
          floor= None
        try:
          if elem.get('data-summary') == 'carpet-area':
            carpet_area = elem.text.replace('Carpet Area', '')
        except:
          carpet_area= None
        try:
          if elem.get('data-summary') == 'society':
            society = elem.text.replace('Society', '')
        except:
          society= None
        try:    
          if elem.get('data-summary') == 'furnishing':
            furnishing = elem.text.replace('Furnishing', '')  
        except:
          furnishing = None
        try: 
          if elem.get('data-summary') == 'bathroom':
            bathrooms = elem.text.replace('Bathroom', '')
        except:
          bathrooms = None
        try:
          if elem.get('data-summary') == 'status':
            status = elem.text.replace('Status', '')
        except:
          status = None
        try:
          if elem.get('data-summary') == 'transaction':
            transaction = elem.text.replace('Transaction', '')
        except:
          transaction = None
        try:
          if 'Owner' in owner:
            data.append([date_posted, link, owner, bhk, locality, city, price, carpet_area, furnishing, bathrooms, facing, status, transaction, per_sqft, floor, desc])
        except:
          pass
  df = pd.DataFrame(data, columns=['Date Posted', 'Link', 'Owner', 'BHK', 'Locality', 'city', 'Price', 'Carpet_Area', 'Furnishing', 'Bathrooms', 'Facing', 'Status', 'Transaction', 'Price/Sqft', 'Floor', 'Description'])
  df.to_csv('Data_{0}.csv'.format(str(city)), index=False)
  df.drop_duplicates(subset='Link', keep='first', inplace=True)
  df.insert(loc=0, column='No', value=np.arange(len(df)))
  try:
    df.drop(index=df.index[0], axis=0, inplace=True)
  except:
    df = df.fillna(0)
  df.to_csv('{0}_{1}_sale.csv'.format(str(city), today), index=False)

  # Function to convert a CSV to JSON
  def make_json(csvFilePath, jsonFilePath):
    
    data = {}
    
    with open(csvFilePath, encoding='utf-8') as csvf:
      csvReader = csv.DictReader(csvf)

      for rows in csvReader:

        key = rows['No']
        data[key] = rows

    with open(jsonFilePath, 'w', encoding='utf-8') as jsonf:
      jsonf.write(json.dumps(data, indent=4))

  csvFilePath = r'{0}_{1}_sale.csv'.format(str(city), today)
  jsonFilePath = r'{0}_{1}_sale.json'.format(str(city), today)

  make_json(csvFilePath, jsonFilePath)

for city in cities:
  scrape(city)